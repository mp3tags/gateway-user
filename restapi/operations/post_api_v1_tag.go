// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PostAPIV1TagHandlerFunc turns a function with the right signature into a post API v1 tag handler
type PostAPIV1TagHandlerFunc func(PostAPIV1TagParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostAPIV1TagHandlerFunc) Handle(params PostAPIV1TagParams) middleware.Responder {
	return fn(params)
}

// PostAPIV1TagHandler interface for that can handle valid post API v1 tag params
type PostAPIV1TagHandler interface {
	Handle(PostAPIV1TagParams) middleware.Responder
}

// NewPostAPIV1Tag creates a new http.Handler for the post API v1 tag operation
func NewPostAPIV1Tag(ctx *middleware.Context, handler PostAPIV1TagHandler) *PostAPIV1Tag {
	return &PostAPIV1Tag{Context: ctx, Handler: handler}
}

/*PostAPIV1Tag swagger:route POST /api/v1/tag postApiV1Tag

change tags

*/
type PostAPIV1Tag struct {
	Context *middleware.Context
	Handler PostAPIV1TagHandler
}

func (o *PostAPIV1Tag) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostAPIV1TagParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
